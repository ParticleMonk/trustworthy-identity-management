
Enter your prompt here.

I need an independent python program, in a single module that is based on the OpenAI API (most recent interface to which you have access) and the pydantic and pandas libraries. The program will take a locally saved JSON formatted file from a ChatGPT conversation (most recent format to which you have access) and, using the OpenAI API, compare the Titles of the JSONs in order to group them into a collection based on the name of the titles and implied meaning of the content of the title, (e.g. Software Design, Writing Ideas, Cooking...). Please include a testing function that is built from Print() commands, annotated out as notes.
I need an independent python program, in a single module that is based on the OpenAI API (most recent interface to which you have access) and the pydantic and pandas libraries. The program will take a locally saved JSON formatted file from a ChatGPT conversation (most recent format to which you have access) and, using the OpenAI API, compare the Titles of the JSONs in order to group them into a collection based on the name of the titles and implied meaning of the content of the title, (e.g. Software Design, Writing Ideas, Cooking...). Please include a testing function that is built from Print() commands, annotated out as notes.
Bad Response
Click the "Generate" button to get a response to your prompt.
You will eventually want this to be a Bad Response. See the question below for more information on this.

You can view a markdown-rendered version of the response on the left side of the page.

Regenerate

Copy Result
Here's a Python program that fulfills your requirements, using the OpenAI API, Pydantic, and Pandas to group conversation titles from a ChatGPT JSON file.


Important Notes:


API Key: Replace YOUR_OPENAI_API_KEY with your actual OpenAI API key.
Error Handling: Basic error handling is included, but you may want to expand it for production use.
Cost: Be mindful that using the OpenAI API will incur costs.

import json
import openai
from pydantic import BaseModel, Field
from typing import List
import pandas as pd

# Set your OpenAI API key
openai.api_key = "YOUR_OPENAI_API_KEY"

# Pydantic model for structured output from the API
class GroupedTitles(BaseModel):
    group_name: str = Field(description="The name of the group the titles belong to.")
    titles: List[str] = Field(description="List of titles belonging to the group.")

def group_conversation_titles(json_file_path):
    """
    Groups conversation titles from a ChatGPT JSON file based on implied meaning.

    Args:
        json_file_path: Path to the JSON file.

    Returns:
        A pandas DataFrame with grouped titles or None if an error occurs.
    """
    try:
        with open(json_file_path, "r") as f:
            data = json.load(f)

        titles = [item["title"] for item in data["conversations"]]

        # Construct the prompt for the OpenAI API
        prompt = f"Group the following conversation titles into meaningful categories based on their content and assign a descriptive name to each group:\n\n{', '.join(titles)}"

        # Call the OpenAI API
        response = openai.ChatCompletion.create(
            model="gpt-4",  # Or gpt-3.5-turbo, depending on your access
            messages=[
                {"role": "system", "content": "You are a helpful assistant that groups items into categories."},
                {"role": "user", "content": prompt}
            ],
            functions=[
                {
                    "name": "group_titles",
                    "description": "Groups conversation titles into categories.",
                    "parameters": GroupedTitles.schema()
                }
            ],
            function_call={"name": "group_titles"}
        )

        # Extract and parse the structured output
        arguments = json.loads(response["choices"][0]["message"]["function_call"]["arguments"])
        grouped_data = GroupedTitles(**arguments)

        # Create a Pandas DataFrame from the structured output
        df = pd.DataFrame({"group_name": [grouped_data.group_name] * len(grouped_data.titles), "title": grouped_data.titles})
        return df

    except Exception as e:
        print(f"An error occurred: {e}")
        return None

# Testing function
def test_grouping():
    """Example function to test the title grouping."""
    # Assume a file named 'sample_chatgpt_data.json' exists in the same directory
    df = group_conversation_titles('sample_chatgpt_data.json')
    if df is not None:
        print(df)
    
    # # Example print statements to inspect output
    # # print(df.groupby('group_name')['title'].apply(list)) 
    # # print(df['group_name'].unique())

if __name__ == "__main__":
    test_grouping() 